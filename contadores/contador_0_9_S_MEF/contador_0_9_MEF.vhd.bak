library ieee;
use ieee.std_logic_1164.all;

entity contador_0_9_MEF is
	port(
		iClk : in  std_logic;
		iX   : in  std_logic_vector(2 downto 0);
		oX   : out std_logic_vector(3 downto 0);
		oY   : out std_logic
	);
end contador_0_9_MEF;

architecture Behavioral of contador_0_9_MEF is

	signal TA, TB, TC, TD : std_logic := '0';
	signal A, B, C, D 	  : std_logic := '0';

	component FFT is port ( 
		T    : in std_logic;
		iClk : in std_logic;
		Q    : out std_logic := '0'
	);
	end component;

begin

	TA <= (not B and not C and not D and not iX(2) and not iX(1) and iX(0)) or (not B and not C and D and not iX(2) and iX(1) and iX(0)) or (B and C and not D and not iX(2) and iX(1) and not iX(0)) or (B and C and D and not iX(2) and not iX(1) and not iX(0)) or (A and iX(1)) or (A and iX(2)) or (A and D and not iX(0));
	TB <= (C and not D and not iX(2) and iX(1) and not iX(0)) or (C and D and not iX(2) and not iX(1) and not iX(0)) or (B and not C and not D and iX(0)) or (B and iX(2)) or (A and not D and not iX(2) and not iX(1) and iX(0)) or (A and D and not iX(2) and iX(1) and iX(0)) or (B and not C and D and iX(1)) or (B and not D and iX(1) and iX(0)) or (B and D and iX(1) and not iX(0));
	TC <= (not A and not D and not iX(2) and iX(1) and not iX(0)) or (not A and D and not iX(2) and not iX(1) and not iX(0)) or (C and not D and iX(0)) or (C and iX(2)) or (C and iX(1)) or (B and not D and not iX(2) and not iX(1) and iX(0)) or (B and D and not iX(2) and iX(1) and iX(0)) or (A and not D and not iX(2) and not iX(1) and iX(0)) or (A and D and not iX(2) and iX(1) and iX(0));
	TD <= (not A and not B and not C and iX(2)) or (D and not iX(0)) or (not iX(2) and not iX(1)) or (not D and not iX(2) and iX(0)) or (D and iX(2));
	
	oY <= (not A and not B and not C and not D and not iX(2) and not iX(1)) or (not A and not B and not C and not D and not iX(2) and not iX(0)) or (not A and not B and not C and D and not iX(2) and iX(1) and iX(0));
	
	FFT0: FFT port map(
		iClk => iClk,
		T   => TA,
		Q   => A
	);
	
	FFT1: FFT port map(
		iClk => iClk,
		T   => TB,
		Q   => B
	);
	
	FFT2: FFT port map(
		iClk => iClk,
		T   => TC,
		Q   => C
	);
	
	FFT3: FFT port map(
		iClk => iClk,
		T   => TD,
		Q   => D
	);
	
	oX <= A & B & C & D;

end Behavioral;