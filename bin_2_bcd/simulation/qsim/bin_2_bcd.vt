// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/26/2023 11:49:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    bin_2_bcd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bin_2_bcd_vlg_sample_tst(
	Bin,
	sampler_tx
);
input [7:0] Bin;
output sampler_tx;

reg sample;
time current_time;
always @(Bin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module bin_2_bcd_vlg_check_tst (
	Cen,
	Dec,
	Uni,
	sampler_rx
);
input [3:0] Cen;
input [3:0] Dec;
input [3:0] Uni;
input sampler_rx;

reg [3:0] Cen_expected;
reg [3:0] Dec_expected;
reg [3:0] Uni_expected;

reg [3:0] Cen_prev;
reg [3:0] Dec_prev;
reg [3:0] Uni_prev;

reg [3:0] Cen_expected_prev;
reg [3:0] Dec_expected_prev;
reg [3:0] Uni_expected_prev;

reg [3:0] last_Cen_exp;
reg [3:0] last_Dec_exp;
reg [3:0] last_Uni_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cen_prev = Cen;
	Dec_prev = Dec;
	Uni_prev = Uni;
end

// update expected /o prevs

always @(trigger)
begin
	Cen_expected_prev = Cen_expected;
	Dec_expected_prev = Dec_expected;
	Uni_expected_prev = Uni_expected;
end


// expected Cen[ 3 ]
initial
begin
	Cen_expected[3] = 1'bX;
end 
// expected Cen[ 2 ]
initial
begin
	Cen_expected[2] = 1'bX;
end 
// expected Cen[ 1 ]
initial
begin
	Cen_expected[1] = 1'bX;
end 
// expected Cen[ 0 ]
initial
begin
	Cen_expected[0] = 1'bX;
end 
// expected Dec[ 3 ]
initial
begin
	Dec_expected[3] = 1'bX;
end 
// expected Dec[ 2 ]
initial
begin
	Dec_expected[2] = 1'bX;
end 
// expected Dec[ 1 ]
initial
begin
	Dec_expected[1] = 1'bX;
end 
// expected Dec[ 0 ]
initial
begin
	Dec_expected[0] = 1'bX;
end 
// expected Uni[ 3 ]
initial
begin
	Uni_expected[3] = 1'bX;
end 
// expected Uni[ 2 ]
initial
begin
	Uni_expected[2] = 1'bX;
end 
// expected Uni[ 1 ]
initial
begin
	Uni_expected[1] = 1'bX;
end 
// expected Uni[ 0 ]
initial
begin
	Uni_expected[0] = 1'bX;
end 
// generate trigger
always @(Cen_expected or Cen or Dec_expected or Dec or Uni_expected or Uni)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cen = %b | expected Dec = %b | expected Uni = %b | ",Cen_expected_prev,Dec_expected_prev,Uni_expected_prev);
	$display("| real Cen = %b | real Dec = %b | real Uni = %b | ",Cen_prev,Dec_prev,Uni_prev);
`endif
	if (
		( Cen_expected_prev[0] !== 1'bx ) && ( Cen_prev[0] !== Cen_expected_prev[0] )
		&& ((Cen_expected_prev[0] !== last_Cen_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cen[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cen_expected_prev);
		$display ("     Real value = %b", Cen_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cen_exp[0] = Cen_expected_prev[0];
	end
	if (
		( Cen_expected_prev[1] !== 1'bx ) && ( Cen_prev[1] !== Cen_expected_prev[1] )
		&& ((Cen_expected_prev[1] !== last_Cen_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cen[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cen_expected_prev);
		$display ("     Real value = %b", Cen_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cen_exp[1] = Cen_expected_prev[1];
	end
	if (
		( Cen_expected_prev[2] !== 1'bx ) && ( Cen_prev[2] !== Cen_expected_prev[2] )
		&& ((Cen_expected_prev[2] !== last_Cen_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cen[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cen_expected_prev);
		$display ("     Real value = %b", Cen_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cen_exp[2] = Cen_expected_prev[2];
	end
	if (
		( Cen_expected_prev[3] !== 1'bx ) && ( Cen_prev[3] !== Cen_expected_prev[3] )
		&& ((Cen_expected_prev[3] !== last_Cen_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cen[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cen_expected_prev);
		$display ("     Real value = %b", Cen_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cen_exp[3] = Cen_expected_prev[3];
	end
	if (
		( Dec_expected_prev[0] !== 1'bx ) && ( Dec_prev[0] !== Dec_expected_prev[0] )
		&& ((Dec_expected_prev[0] !== last_Dec_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dec[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dec_expected_prev);
		$display ("     Real value = %b", Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dec_exp[0] = Dec_expected_prev[0];
	end
	if (
		( Dec_expected_prev[1] !== 1'bx ) && ( Dec_prev[1] !== Dec_expected_prev[1] )
		&& ((Dec_expected_prev[1] !== last_Dec_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dec[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dec_expected_prev);
		$display ("     Real value = %b", Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dec_exp[1] = Dec_expected_prev[1];
	end
	if (
		( Dec_expected_prev[2] !== 1'bx ) && ( Dec_prev[2] !== Dec_expected_prev[2] )
		&& ((Dec_expected_prev[2] !== last_Dec_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dec[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dec_expected_prev);
		$display ("     Real value = %b", Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dec_exp[2] = Dec_expected_prev[2];
	end
	if (
		( Dec_expected_prev[3] !== 1'bx ) && ( Dec_prev[3] !== Dec_expected_prev[3] )
		&& ((Dec_expected_prev[3] !== last_Dec_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dec[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dec_expected_prev);
		$display ("     Real value = %b", Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dec_exp[3] = Dec_expected_prev[3];
	end
	if (
		( Uni_expected_prev[0] !== 1'bx ) && ( Uni_prev[0] !== Uni_expected_prev[0] )
		&& ((Uni_expected_prev[0] !== last_Uni_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Uni[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Uni_expected_prev);
		$display ("     Real value = %b", Uni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Uni_exp[0] = Uni_expected_prev[0];
	end
	if (
		( Uni_expected_prev[1] !== 1'bx ) && ( Uni_prev[1] !== Uni_expected_prev[1] )
		&& ((Uni_expected_prev[1] !== last_Uni_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Uni[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Uni_expected_prev);
		$display ("     Real value = %b", Uni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Uni_exp[1] = Uni_expected_prev[1];
	end
	if (
		( Uni_expected_prev[2] !== 1'bx ) && ( Uni_prev[2] !== Uni_expected_prev[2] )
		&& ((Uni_expected_prev[2] !== last_Uni_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Uni[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Uni_expected_prev);
		$display ("     Real value = %b", Uni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Uni_exp[2] = Uni_expected_prev[2];
	end
	if (
		( Uni_expected_prev[3] !== 1'bx ) && ( Uni_prev[3] !== Uni_expected_prev[3] )
		&& ((Uni_expected_prev[3] !== last_Uni_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Uni[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Uni_expected_prev);
		$display ("     Real value = %b", Uni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Uni_exp[3] = Uni_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module bin_2_bcd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] Bin;
// wires                                               
wire [3:0] Cen;
wire [3:0] Dec;
wire [3:0] Uni;

wire sampler;                             

// assign statements (if any)                          
bin_2_bcd i1 (
// port map - connection between master ports and signals/registers   
	.Bin(Bin),
	.Cen(Cen),
	.Dec(Dec),
	.Uni(Uni)
);
// Bin[ 7 ]
initial
begin
	Bin[7] = 1'b1;
	Bin[7] = #40000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #35000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #10000 1'b1;
	Bin[7] = #10000 1'b0;
	Bin[7] = #10000 1'b1;
	Bin[7] = #40000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #10000 1'b0;
	Bin[7] = #25000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #15000 1'b1;
	Bin[7] = #30000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #10000 1'b0;
	Bin[7] = #10000 1'b1;
	Bin[7] = #20000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #15000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #15000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #10000 1'b1;
	Bin[7] = #10000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #45000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #20000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #10000 1'b0;
	Bin[7] = #25000 1'b1;
	Bin[7] = #25000 1'b0;
	Bin[7] = #15000 1'b1;
	Bin[7] = #35000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #25000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #10000 1'b0;
	Bin[7] = #25000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #45000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #10000 1'b1;
	Bin[7] = #10000 1'b0;
	Bin[7] = #30000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #5000 1'b1;
	Bin[7] = #10000 1'b0;
	Bin[7] = #15000 1'b1;
	Bin[7] = #10000 1'b0;
	Bin[7] = #10000 1'b1;
	Bin[7] = #25000 1'b0;
	Bin[7] = #15000 1'b1;
	Bin[7] = #15000 1'b0;
	Bin[7] = #10000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #15000 1'b1;
	Bin[7] = #5000 1'b0;
	Bin[7] = #5000 1'b1;
end 
// Bin[ 6 ]
initial
begin
	Bin[6] = 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #20000 1'b1;
	Bin[6] = #25000 1'b0;
	Bin[6] = #15000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #20000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #20000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #20000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #15000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #35000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #15000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #20000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #15000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #25000 1'b1;
	Bin[6] = #20000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #35000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #15000 1'b0;
	Bin[6] = #15000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #15000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #15000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #35000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #15000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #20000 1'b1;
	Bin[6] = #10000 1'b0;
	Bin[6] = #15000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #5000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #30000 1'b1;
	Bin[6] = #5000 1'b0;
	Bin[6] = #10000 1'b1;
	Bin[6] = #5000 1'b0;
end 
// Bin[ 5 ]
initial
begin
	Bin[5] = 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #15000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #25000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #15000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #15000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #20000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #15000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #20000 1'b0;
	Bin[5] = #30000 1'b1;
	Bin[5] = #15000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #15000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #20000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #15000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #15000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #10000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #5000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #10000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #20000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #15000 1'b1;
	Bin[5] = #5000 1'b0;
	Bin[5] = #25000 1'b1;
	Bin[5] = #5000 1'b0;
end 
// Bin[ 4 ]
initial
begin
	Bin[4] = 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #30000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #40000 1'b0;
	Bin[4] = #15000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #10000 1'b1;
	Bin[4] = #30000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #15000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #35000 1'b1;
	Bin[4] = #20000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #20000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #45000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #15000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #10000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #10000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #10000 1'b1;
	Bin[4] = #15000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #10000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #10000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #15000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #10000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #15000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #15000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #20000 1'b0;
	Bin[4] = #25000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #15000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #15000 1'b1;
	Bin[4] = #20000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #15000 1'b1;
	Bin[4] = #15000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #20000 1'b0;
	Bin[4] = #10000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #20000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #25000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #30000 1'b1;
	Bin[4] = #15000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #10000 1'b0;
	Bin[4] = #10000 1'b1;
	Bin[4] = #5000 1'b0;
	Bin[4] = #5000 1'b1;
	Bin[4] = #15000 1'b0;
	Bin[4] = #10000 1'b1;
end 
// Bin[ 3 ]
initial
begin
	Bin[3] = 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #25000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #20000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #15000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #35000 1'b1;
	Bin[3] = #15000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #10000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #10000 1'b0;
	Bin[3] = #25000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #15000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #25000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #15000 1'b1;
	Bin[3] = #10000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #15000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #35000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #15000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #30000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #10000 1'b0;
	Bin[3] = #20000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #20000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #15000 1'b1;
	Bin[3] = #10000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #15000 1'b0;
	Bin[3] = #20000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #15000 1'b0;
	Bin[3] = #15000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #10000 1'b1;
	Bin[3] = #5000 1'b0;
	Bin[3] = #5000 1'b1;
end 
// Bin[ 2 ]
initial
begin
	Bin[2] = 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #15000 1'b1;
	Bin[2] = #35000 1'b0;
	Bin[2] = #30000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #10000 1'b0;
	Bin[2] = #10000 1'b1;
	Bin[2] = #20000 1'b0;
	Bin[2] = #30000 1'b1;
	Bin[2] = #15000 1'b0;
	Bin[2] = #20000 1'b1;
	Bin[2] = #10000 1'b0;
	Bin[2] = #15000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #15000 1'b1;
	Bin[2] = #10000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #15000 1'b0;
	Bin[2] = #15000 1'b1;
	Bin[2] = #20000 1'b0;
	Bin[2] = #15000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #20000 1'b1;
	Bin[2] = #15000 1'b0;
	Bin[2] = #15000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #10000 1'b1;
	Bin[2] = #10000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #10000 1'b0;
	Bin[2] = #10000 1'b1;
	Bin[2] = #10000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #25000 1'b0;
	Bin[2] = #35000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #10000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #10000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #10000 1'b0;
	Bin[2] = #10000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #15000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #10000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #10000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #15000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #10000 1'b0;
	Bin[2] = #30000 1'b1;
	Bin[2] = #10000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #45000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #15000 1'b0;
	Bin[2] = #10000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #10000 1'b1;
	Bin[2] = #30000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #10000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #10000 1'b1;
	Bin[2] = #15000 1'b0;
	Bin[2] = #25000 1'b1;
	Bin[2] = #15000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #5000 1'b0;
	Bin[2] = #5000 1'b1;
	Bin[2] = #5000 1'b0;
end 
// Bin[ 1 ]
initial
begin
	Bin[1] = 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #15000 1'b0;
	Bin[1] = #20000 1'b1;
	Bin[1] = #15000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #15000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #15000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #15000 1'b0;
	Bin[1] = #55000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #25000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #10000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #15000 1'b1;
	Bin[1] = #10000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #20000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #10000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #20000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #15000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #10000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #15000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #30000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #35000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #25000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #10000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #15000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #20000 1'b0;
	Bin[1] = #15000 1'b1;
	Bin[1] = #15000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #10000 1'b0;
	Bin[1] = #20000 1'b1;
	Bin[1] = #10000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #15000 1'b0;
	Bin[1] = #15000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #20000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #10000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #10000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #5000 1'b1;
	Bin[1] = #10000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #5000 1'b0;
	Bin[1] = #10000 1'b1;
	Bin[1] = #5000 1'b0;
end 
// Bin[ 0 ]
initial
begin
	Bin[0] = 1'b1;
	Bin[0] = #10000 1'b0;
	Bin[0] = #20000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #20000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #20000 1'b1;
	Bin[0] = #10000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #10000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #10000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #25000 1'b1;
	Bin[0] = #15000 1'b0;
	Bin[0] = #10000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #15000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #15000 1'b0;
	Bin[0] = #15000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #10000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #10000 1'b1;
	Bin[0] = #15000 1'b0;
	Bin[0] = #10000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #20000 1'b0;
	Bin[0] = #10000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #10000 1'b1;
	Bin[0] = #30000 1'b0;
	Bin[0] = #10000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #10000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #10000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #10000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #10000 1'b0;
	Bin[0] = #10000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #20000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #15000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #20000 1'b1;
	Bin[0] = #30000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #15000 1'b0;
	Bin[0] = #15000 1'b1;
	Bin[0] = #10000 1'b0;
	Bin[0] = #10000 1'b1;
	Bin[0] = #15000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #10000 1'b1;
	Bin[0] = #20000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #10000 1'b0;
	Bin[0] = #10000 1'b1;
	Bin[0] = #15000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #10000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #15000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #10000 1'b1;
	Bin[0] = #10000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #10000 1'b0;
	Bin[0] = #15000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #15000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #15000 1'b0;
	Bin[0] = #5000 1'b1;
	Bin[0] = #5000 1'b0;
	Bin[0] = #20000 1'b1;
	Bin[0] = #30000 1'b0;
end 

bin_2_bcd_vlg_sample_tst tb_sample (
	.Bin(Bin),
	.sampler_tx(sampler)
);

bin_2_bcd_vlg_check_tst tb_out(
	.Cen(Cen),
	.Dec(Dec),
	.Uni(Uni),
	.sampler_rx(sampler)
);
endmodule

